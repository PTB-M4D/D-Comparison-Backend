package de.ptb.backend.controller;

import de.ptb.backend.dtos.ConstantDto;
import de.ptb.backend.dtos.FundamentalConstantDto;
import de.ptb.backend.model.FundamentalConstant;
import de.ptb.backend.model.Participant;
import de.ptb.backend.model.Report;
import de.ptb.backend.repository.FundamentalConstantRepository;
import de.ptb.backend.repository.ParticipantRepository;
import de.ptb.backend.service.FundamentalConstantService;
import de.ptb.backend.service.ParticipantService;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.xml.bind.DatatypeConverter;
import lombok.AllArgsConstructor;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
@AllArgsConstructor
@RequestMapping(path = "/")
public class CodataController {
    private FundamentalConstantRepository fundamentalConstantRepository;
    private FundamentalConstantService fundamentalConstantService;
    private ParticipantRepository participantRepository;
    private ParticipantService participantService;
    private static JsonResponse response = new JsonResponse();
    private static String UPLOADED_FOLDER = "./Downloads/";

    @RequestMapping(method = {RequestMethod.GET}, value = "/fundamentalconstants")
    public String fundamentalConstant(Model model) {
        List<FundamentalConstant> fundamentalConstants = fundamentalConstantRepository.findAll();
        model.addAttribute("listFundamentalConstants", fundamentalConstants);
        return "fundamentalconstants";
    }

    @GetMapping("/home")
    public String home() {
        return "index";
    }

    @RequestMapping(value = "/dkeycomparison", method = RequestMethod.GET)
    public String getParticipants(Model model) {
        List<Participant> participantList = participantService.getParticipantList();
//        Report report =participantService.getReport();
        model.addAttribute("participantList", participantList);
       model.addAttribute("participants", new Participant());
//        model.addAttribute("pidReport",pidReport);
//       model.addAttribute("report", report);
        model.addAttribute("report", new Report());
        return "dkeycomparison";
    }


    @RequestMapping(value = "add", method = RequestMethod.POST)
    public String createParticipant(Model model, @ModelAttribute  Participant participant) {
         participantService.addParticipant(participant);
        return "redirect:/dkeycomparison";
    }
    @RequestMapping(value = "evaluate", method = RequestMethod.POST)
    public String createReport( Model model, @ModelAttribute("report")  Report report){
          Report r= participantService.addReport(report);
        model.addAttribute("report", new Report());
        model.addAttribute("participants", new Participant());
//          String pid= r.getPidReport();
//          List list =r.getParticipantList();pidReport
       // model.addAttribute("report",report);
//        model.addAttribute("pidReport",report.getPidReport());
        return "redirect:/dkeycomparison";
    }

    @RequestMapping(value = "keyComparison", method = RequestMethod.POST)
    public String createReport(Model model, @ModelAttribute JsonResponse response) throws IOException {
        String status = response.getMessageStatus();
        Map<String, String> dkcr = response.getDKCReport();
        return "redirect:/dkeycomparison";
    }
    @GetMapping("/delete")
    public String delete(Integer id){
        participantService.delete(id);
        return "redirect:/dkeycomparison";
    }
    @RequestMapping(value = "/fundamentalcontants", produces = MediaType.APPLICATION_XML_VALUE, method = RequestMethod.GET)
    public String constantXml(Model model) {
        List<FundamentalConstantDto> fundamentalconstantList= this.getConstantData();
        model.addAttribute("fundamentalconstantList", fundamentalconstantList);
        return "redirect:/fundamentalcontants" ;
    }

    @GetMapping("/download")
    public  void keyComparison(Model model, HttpServletResponse response) throws IOException {
        String base64 ="";
        byte[] data = DatatypeConverter.parseBase64Binary(base64);
        String path ;
        path= "CCM-K1.xml";
        File file = new File(path);
        try {
            OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(file));
            outputStream.write(data);
        } catch (Exception e) {
            e.printStackTrace();
        }
        response.setContentType("application/octet-stream");
        String headerKey ="Content Disposition";
        String headerValue = "attachment; filename=" + file.getName();
        response.setHeader(headerKey, headerValue);
        ServletOutputStream outputStream = response.getOutputStream();
        BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(file));
        byte[] buffer = new byte[8192];
        int bytesRead = -1;
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead);
        }
        inputStream.close();
        outputStream.close();
    }

    private List <FundamentalConstantDto> getConstantData() {
        List <FundamentalConstantDto> fundamentalConstantDtoList = new ArrayList<FundamentalConstantDto>();
        FundamentalConstantDto fundamentalConstantDto = new FundamentalConstantDto();

        fundamentalConstantService.getFundamentalConstantData().forEach(fundamentalConstant -> {
            fundamentalConstantDto.setPid(fundamentalConstant.getPid());
            fundamentalConstantDto.setBipmPID(fundamentalConstant.getBipmPID());
            fundamentalConstantDto.setdSIApproved(fundamentalConstant.getdSIApproved());
            ConstantDto constantDto = new ConstantDto();
            fundamentalConstantService.getConstantData().forEach(constant -> {
                constantDto.setLabel(constant.getLabel());
                constantDto.setQuantityType(constant.getQuantityType());
                constantDto.setValue(constant.getValue());
                constantDto.setUnit(constant.getUnit());
                constantDto.setDateTime(constant.getDateTime());
                constantDto.setUncertainty(constant.getUncertainty());
                constantDto.setDistribution(constant.getDistribution());
            });
            fundamentalConstantDto.setConstant(constantDto);
        });
        fundamentalConstantDtoList.add(fundamentalConstantDto);
        return fundamentalConstantDtoList;
    }

//    @GetMapping(value = "/index/constantxml", produces = MediaType.APPLICATION_XML_VALUE)
//    public FundamentalConstantDto constantXml() {
//        return data();
//    }
//    private FundamentalConstantDto data() {
//        FundamentalConstantDto fundamentalConstantDto = new FundamentalConstantDto();
//        fundamentalConstantServiceImpl.getFundamentalConstantData().forEach(fundamentalConstant -> {
//            fundamentalConstantDto.setPid(fundamentalConstant.getPid());
//            fundamentalConstantDto.setBipmPID(fundamentalConstant.getBipmPID());
//            fundamentalConstantDto.setdSIApproved(fundamentalConstant.getdSIApproved());
//            ConstantDto constantDto = new ConstantDto();
//            fundamentalConstantServiceImpl.getConstantData().forEach(constant -> {
//                constantDto.setLabel(constant.getLabel());
//                constantDto.setQuantityType(constant.getQuantityType());
//                constantDto.setValue(constant.getValue());
//                constantDto.setUnit(constant.getUnit());
//                constantDto.setDateTime(constant.getDateTime());
//                constantDto.setUncertainty(constant.getUncertainty());
//                constantDto.setDistribution(constant.getDistribution());
//            });
//            fundamentalConstantDto.setConstant(constantDto);
//        });
//        try {
//            JAXBContext jaxbContext= JAXBContext.newInstance(FundamentalConstantDto.class);
//            Marshaller marshaller =jaxbContext.createMarshaller();
//        } catch (JAXBException e) {
//            throw new RuntimeException(e);
//        }
//        return fundamentalConstantDto;
//    }
}
